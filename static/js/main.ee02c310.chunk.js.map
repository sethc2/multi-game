{"version":3,"sources":["games/util.tsx","games/addition.tsx","games/numberBonds.tsx","games/index.ts","games/multiplication.tsx","games/division.tsx","GameRunner.tsx","TimeGame.tsx","GameSettings/GameSettings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomInt","max","Math","floor","random","createNumberEquationRenderProblem","sign","firstKey","secondKey","isAnswerCorrect","problem","givenAnswer","className","additionGameCreator","name","createGame","maxNumber","getNewProblem","firstAddend","secondAddend","type","getActualAnswer","answer","renderProblem","renderPossibleAnswer","getPossibleAnswers","currentProblem","answers","Set","add","size","Array","from","sort","a","b","blanks","numberBondGameCreator","additionGame","additionProblem","blank","GameCreators","multiplicand","multiplier","quotient","divisor","dividend","useGameRunner","game","delayAfterRightAnswer","useState","numberCorrect","setNumberCorrect","numberWrong","setNumberWrong","setCurrentProblem","guessedAnswer","setGuessedAnswer","renderedProblem","useMemo","handleChoseAnswer","useCallback","answerIndex","window","setTimeout","possibleRenderedAnswers","map","x","onReset","onChoseAnswer","BasicMultipleChoiceGameRunner","onDone","GameDisplay","footer","onClick","timer","onKeyDown","e","key","tabIndex","index","TimedGameRunner","goal","gameTimeSeconds","timeRemaining","setTimeRemaining","timeRemainingRef","useRef","current","intervalRef","gameDisplayProps","useEffect","setInterval","clearInterval","countDownTimeLeft","timerLeftPercent","setTimerLeftPercent","timerIntervalRef","timerLeftRef","ratePerSecond","newPercent","style","height","HowLongForAmountGame","timeCount","setTimecount","timeCountRef","seconds","styles","stepsAndNames","GameSettings","step","setStep","settings","setSettings","hideBack","disableNext","undefined","lastGameResults","setLastGameResults","params","selectedName","Name","setSelectedName","selectedGame","Game","setSelectedGame","selectedLevel","Level","setSelectedLevel","selectedStyle","Style","setSelectedStyle","disabled","stepIndex","findIndex","GameRun","gameCreator","find","GameStyleSelect","LevelSelect","levels","levelArray","push","level","GameSelect","NameSelect","namesSettingsJson","localStorage","getItem","namesSettings","JSON","parse","version","names","availableNames","setAvailableNames","addName","newName","toLocaleLowerCase","newAvailableNames","toLocaleUpperCase","localeCompare","setItem","stringify","setNewNameInput","newNameInput","value","placeholder","onChange","target","App","started","setStarted","handleDone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee02c310.chunk.js","sourcesContent":["export function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function getNumberAnswers(\n  currentAnswer: number,\n  getRandomAnswer: () => number\n) {\n  const answers = new Set<number>();\n  answers.add(currentAnswer);\n  while (answers.size < 4) {\n    answers.add(getRandomAnswer());\n  }\n  return Array.from(answers).sort((a, b) => a - b) as [\n    number,\n    number,\n    number,\n    number\n  ];\n}\n\nexport function createNumberEquationRenderProblem<\n  TProblem extends {},\n  TFirstKey extends keyof TProblem,\n  TSecondKey extends keyof TProblem\n>(\n  sign: string,\n  firstKey: TFirstKey,\n  secondKey: TSecondKey,\n  isAnswerCorrect: (problem: TProblem, givenAnswer: number) => boolean\n) {\n  return (problem: TProblem, givenAnswer: number | null) => (\n    <div className=\"numberEquationProblem\">\n      <span>{problem[firstKey]}</span>\n      <span>{sign}</span>\n      <span>{problem[secondKey]}</span>\n      <span>=</span>\n      <span\n        className={`problemAnswerQuestion ${\n          givenAnswer\n            ? isAnswerCorrect(problem, givenAnswer)\n              ? \"problemAnswerCorrect\"\n              : \"problemAnswerWrong\"\n            : \"\"\n        }`}\n      >\n        {givenAnswer === null ? \"?\" : givenAnswer}\n      </span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { createNumberEquationRenderProblem, getRandomInt } from \"./util\";\n\nexport interface AdditionProblem {\n  firstAddend: number;\n  secondAddend: number;\n  type: \"addition\";\n}\nexport interface AdditionGameSettings {\n  maxNumber: number;\n}\n\nexport const additionGameCreator = {\n  name: \"Addition\" as const,\n  createGame: ({ maxNumber }: AdditionGameSettings) => {\n    const getNewProblem = () => {\n      const firstAddend = getRandomInt(maxNumber) + 1;\n      const secondAddend = getRandomInt(maxNumber) + 1;\n      const problem: AdditionProblem = {\n        firstAddend,\n        secondAddend,\n        type: \"addition\",\n      };\n      return problem;\n    };\n    const getActualAnswer = (problem: AdditionProblem) =>\n      problem.firstAddend + problem.secondAddend;\n\n    const isAnswerCorrect = (problem: AdditionProblem, answer: number) =>\n      getActualAnswer(problem) === answer;\n    return {\n      renderProblem: createNumberEquationRenderProblem(\n        \"+\",\n        \"firstAddend\",\n        \"secondAddend\",\n        isAnswerCorrect\n      ),\n      isAnswerCorrect,\n      renderPossibleAnswer: (answer: number) => (\n        <div className=\"possibleAnswerContainer\">{answer}</div>\n      ),\n      getNewProblem,\n      getActualAnswer,\n      getPossibleAnswers: (currentProblem: AdditionProblem) => {\n        const answers = new Set<number>();\n        answers.add(getActualAnswer(currentProblem));\n        while (answers.size < 4) {\n          answers.add(getActualAnswer(getNewProblem()));\n        }\n        return Array.from(answers).sort((a, b) => a - b) as [\n          number,\n          number,\n          number,\n          number\n        ];\n      },\n    };\n  },\n};\n","import React from \"react\";\nimport { additionGameCreator, AdditionProblem } from \"./addition\";\nimport { createNumberEquationRenderProblem, getRandomInt } from \"./util\";\n\nexport interface NumberBondProblem {\n  additionProblem: AdditionProblem;\n  blank: \"firstAddend\" | \"secondAddend\" | \"sum\";\n  type: \"numberBond\";\n}\nexport interface NumberBondSettings {\n  maxNumber: number;\n}\n\nconst blanks = [\"firstAddend\", \"secondAddend\", \"sum\"] as const;\nexport const numberBondGameCreator = {\n  name: \"NumberBond\" as const,\n  createGame: ({ maxNumber }: NumberBondSettings) => {\n    const additionGame = additionGameCreator.createGame({ maxNumber });\n    const getNewProblem = () => {\n      const additionProblem = additionGame.getNewProblem();\n      const blank = blanks[getRandomInt(3)];\n      return {\n        additionProblem,\n        blank,\n      } as NumberBondProblem;\n    };\n    const getActualAnswer = (problem: NumberBondProblem) => {\n      if (problem.blank === \"firstAddend\") {\n        return problem.additionProblem.firstAddend;\n      }\n      if (problem.blank === \"secondAddend\") {\n        return problem.additionProblem.secondAddend;\n      }\n      return additionGame.getActualAnswer(problem.additionProblem);\n    };\n\n    const isAnswerCorrect = (problem: NumberBondProblem, answer: number) =>\n      getActualAnswer(problem) === answer;\n    return {\n      renderProblem: (\n        problem: NumberBondProblem,\n        givenAnswer: number | null\n      ) => (\n        <div className=\"numberBondProblem\">\n          <div className=\"numberBondTop\">\n            <span\n              className={`numberBondQuestion ${\n                givenAnswer && problem.blank === \"sum\"\n                  ? isAnswerCorrect(problem, givenAnswer)\n                    ? \"problemAnswerCorrect\"\n                    : \"problemAnswerWrong\"\n                  : \"\"\n              }`}\n            >\n              {problem.blank === \"sum\"\n                ? givenAnswer\n                  ? givenAnswer\n                  : \"?\"\n                : additionGame.getActualAnswer(problem.additionProblem)}\n            </span>\n          </div>\n          <div className=\"numberBondBottom\">\n            <span\n              className={`numberBondQuestion ${\n                givenAnswer && problem.blank === \"firstAddend\"\n                  ? isAnswerCorrect(problem, givenAnswer)\n                    ? \"problemAnswerCorrect\"\n                    : \"problemAnswerWrong\"\n                  : \"\"\n              }`}\n            >\n              {problem.blank === \"firstAddend\"\n                ? givenAnswer\n                  ? givenAnswer\n                  : \"?\"\n                : problem.additionProblem.firstAddend}\n            </span>\n            <span\n              className={`numberBondQuestion ${\n                givenAnswer && problem.blank === \"secondAddend\"\n                  ? isAnswerCorrect(problem, givenAnswer)\n                    ? \"problemAnswerCorrect\"\n                    : \"problemAnswerWrong\"\n                  : \"\"\n              }`}\n            >\n              {problem.blank === \"secondAddend\"\n                ? givenAnswer\n                  ? givenAnswer\n                  : \"?\"\n                : problem.additionProblem.secondAddend}\n            </span>\n          </div>\n        </div>\n      ),\n      isAnswerCorrect,\n      renderPossibleAnswer: (answer: number) => (\n        <div className=\"possibleAnswerContainer\">{answer}</div>\n      ),\n      getNewProblem,\n      getActualAnswer,\n      getPossibleAnswers: (currentProblem: NumberBondProblem) => {\n        const answers = new Set<number>();\n        answers.add(getActualAnswer(currentProblem));\n        while (answers.size < 4) {\n          answers.add(getActualAnswer(getNewProblem()));\n        }\n        return Array.from(answers).sort((a, b) => a - b) as [\n          number,\n          number,\n          number,\n          number\n        ];\n      },\n    };\n  },\n};\n","import { additionGameCreator } from \"./addition\";\nimport { multiplicationGameCreator } from \"./multiplication\";\nimport { divisionGameCreator } from \"./division\";\nimport { numberBondGameCreator } from \"./numberBonds\";\nexport type { AdditionGameSettings } from \"./addition\";\nexport type { MultiplicationGameSettings } from \"./multiplication\";\nexport type { DivisionGameSettings } from \"./division\";\n\nexport const GameCreators = [\n  additionGameCreator,\n  multiplicationGameCreator,\n  divisionGameCreator,\n  numberBondGameCreator,\n];\n\nexport type GameCreator = typeof GameCreators[0 | 1];\nexport type GameType = GameCreator[\"name\"];\nexport type Game = ReturnType<GameCreator[\"createGame\"]>;\n","import React from \"react\";\nimport { createNumberEquationRenderProblem, getRandomInt } from \"./util\";\n\nexport interface MultiplicationProblem {\n  multiplicand: number;\n  multiplier: number;\n  type: \"multiplication\";\n}\nexport interface MultiplicationGameSettings {\n  maxNumber: number;\n}\nexport const multiplicationGameCreator = {\n  name: \"Multiplication\" as const,\n  createGame: ({ maxNumber }: MultiplicationGameSettings) => {\n    const getNewProblem = () => {\n      const multiplicand = getRandomInt(maxNumber) + 1;\n      const multiplier = getRandomInt(maxNumber) + 1;\n      const problem: MultiplicationProblem = {\n        multiplicand,\n        multiplier,\n        type: \"multiplication\",\n      };\n      return problem;\n    };\n    const getActualAnswer = (problem: MultiplicationProblem) =>\n      problem.multiplicand * problem.multiplier;\n    const isAnswerCorrect = (problem: MultiplicationProblem, answer: number) =>\n      getActualAnswer(problem) === answer;\n    return {\n      renderProblem: createNumberEquationRenderProblem(\n        \"X\",\n        \"multiplicand\",\n        \"multiplier\",\n        isAnswerCorrect\n      ),\n      isAnswerCorrect,\n      renderPossibleAnswer: (answer: number) => (\n        <div className=\"possibleAnswerContainer\">{answer}</div>\n      ),\n      getNewProblem,\n      getActualAnswer,\n      getPossibleAnswers: (currentProblem: MultiplicationProblem) => {\n        const answers = new Set<number>();\n        answers.add(getActualAnswer(currentProblem));\n        while (answers.size < 4) {\n          answers.add(getActualAnswer(getNewProblem()));\n        }\n        return Array.from(answers).sort((a, b) => a - b) as [\n          number,\n          number,\n          number,\n          number\n        ];\n      },\n    };\n  },\n};\n","import React from \"react\";\nimport { createNumberEquationRenderProblem, getRandomInt } from \"./util\";\n\nexport interface DivisionProblem {\n  dividend: number;\n  divisor: number;\n  type: \"division\";\n}\nexport interface DivisionGameSettings {\n  maxNumber: number;\n}\nexport const divisionGameCreator = {\n  name: \"Division\" as const,\n  createGame: ({ maxNumber }: DivisionGameSettings) => {\n    const getNewProblem = () => {\n      const quotient = getRandomInt(maxNumber) + 1;\n      const divisor = getRandomInt(maxNumber) + 1;\n      const problem: DivisionProblem = {\n        divisor,\n        dividend: quotient * divisor,\n        type: \"division\",\n      };\n      return problem;\n    };\n    const getActualAnswer = (problem: DivisionProblem) =>\n      problem.dividend / problem.divisor;\n    const isAnswerCorrect = (problem: DivisionProblem, answer: number) =>\n      getActualAnswer(problem) === answer;\n    return {\n      renderProblem: createNumberEquationRenderProblem(\n        \"÷\",\n        \"dividend\",\n        \"divisor\",\n        isAnswerCorrect\n      ),\n      isAnswerCorrect,\n      renderPossibleAnswer: (answer: number) => (\n        <div className=\"possibleAnswerContainer\">{answer}</div>\n      ),\n      getNewProblem,\n      getActualAnswer,\n      getPossibleAnswers: (currentProblem: DivisionProblem) => {\n        const answers = new Set<number>();\n        answers.add(getActualAnswer(currentProblem));\n        while (answers.size < 4) {\n          answers.add(getActualAnswer(getNewProblem()));\n        }\n        return Array.from(answers).sort((a, b) => a - b) as [\n          number,\n          number,\n          number,\n          number\n        ];\n      },\n    };\n  },\n};\n","import { doesNotReject } from \"node:assert\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { Game } from \"./games\";\n\nexport type Problem = any;\nexport type Answer = any;\nexport interface UseGameRunnerParams {\n  game: Game;\n  delayAfterRightAnswer?: number;\n}\n\nexport function useGameRunner({\n  game,\n  delayAfterRightAnswer,\n}: UseGameRunnerParams) {\n  const {\n    getNewProblem,\n    getPossibleAnswers,\n    isAnswerCorrect,\n    renderPossibleAnswer,\n    renderProblem,\n  } = game;\n\n  const [numberCorrect, setNumberCorrect] = useState(0);\n  const [numberWrong, setNumberWrong] = useState(0);\n\n  const [currentProblem, setCurrentProblem] = useState<Problem>(\n    game.getNewProblem()\n  );\n  const [guessedAnswer, setGuessedAnswer] = useState<Answer | null>(null);\n\n  const renderedProblem = useMemo(() => {\n    return renderProblem(currentProblem, guessedAnswer);\n  }, [currentProblem, renderProblem, guessedAnswer]);\n\n  const answers = useMemo(() => {\n    return getPossibleAnswers(currentProblem);\n  }, [currentProblem, getPossibleAnswers]);\n\n  const handleChoseAnswer = useCallback(\n    (answerIndex: number) => {\n      const answer = answers[answerIndex];\n      setGuessedAnswer(answer);\n      if (isAnswerCorrect(currentProblem, answer)) {\n        if (guessedAnswer === null) {\n          setNumberCorrect(numberCorrect + 1);\n        }\n        if (delayAfterRightAnswer) {\n          window.setTimeout(() => {\n            setGuessedAnswer(null);\n            setCurrentProblem(getNewProblem());\n          }, delayAfterRightAnswer);\n        } else {\n          setGuessedAnswer(null);\n        }\n      } else {\n        if (guessedAnswer === null) {\n          setNumberWrong(numberWrong + 1);\n        }\n      }\n    },\n    [\n      answers,\n      isAnswerCorrect,\n      getNewProblem,\n      currentProblem,\n      numberCorrect,\n      numberWrong,\n      delayAfterRightAnswer,\n    ]\n  );\n\n  const possibleRenderedAnswers = useMemo(() => {\n    return answers.map((x) => renderPossibleAnswer(x));\n  }, [renderPossibleAnswer, answers]);\n\n  const onReset = useCallback(() => {\n    setNumberWrong(0);\n    setNumberCorrect(0);\n    setCurrentProblem(getNewProblem());\n  }, [getNewProblem]);\n  return {\n    currentProblem: currentProblem,\n    onChoseAnswer: handleChoseAnswer,\n    renderedProblem: renderedProblem,\n    numberCorrect: numberCorrect,\n    numberWrong: numberWrong,\n    possibleRenderedAnswers: possibleRenderedAnswers,\n    onReset,\n  };\n}\nexport interface GameRunnerProps extends UseGameRunnerParams {\n  onDone: (params: { numberCorrect: number; numberWrong: number }) => void;\n}\nexport function BasicMultipleChoiceGameRunner({\n  game,\n  delayAfterRightAnswer = 500,\n  onDone,\n}: GameRunnerProps) {\n  const {\n    currentProblem,\n    numberCorrect,\n    numberWrong,\n    onChoseAnswer,\n    possibleRenderedAnswers,\n    renderedProblem,\n  } = useGameRunner({ game, delayAfterRightAnswer });\n  return (\n    <GameDisplay\n      currentProblem={currentProblem}\n      onChoseAnswer={onChoseAnswer}\n      renderedProblem={renderedProblem}\n      possibleRenderedAnswers={possibleRenderedAnswers}\n      footer={\n        <>\n          <div>Nubmer correct: {numberCorrect}</div>\n          <div>Number wrong: {numberWrong}</div>\n          <button onClick={() => onDone({ numberCorrect, numberWrong })}>\n            Done\n          </button>\n        </>\n      }\n    ></GameDisplay>\n  );\n}\n\nexport interface GameDisplayProps {\n  possibleRenderedAnswers: JSX.Element[];\n  onChoseAnswer: (answerIndex: number) => void;\n  renderedProblem: JSX.Element;\n  currentProblem: Problem;\n  footer: JSX.Element;\n  timer?: JSX.Element;\n}\nexport function GameDisplay({\n  possibleRenderedAnswers,\n  onChoseAnswer,\n  renderedProblem,\n  footer,\n  timer,\n}: GameDisplayProps) {\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === \"ArrowUp\") {\n      onChoseAnswer(0);\n    }\n    if (e.key === \"ArrowLeft\") {\n      onChoseAnswer(1);\n    }\n    if (e.key === \"ArrowRight\") {\n      onChoseAnswer(2);\n    }\n    if (e.key === \"ArrowDown\") {\n      onChoseAnswer(3);\n    }\n  };\n\n  return (\n    <div\n      className=\"gameRunnerContainer\"\n      onKeyDown={handleKeyPress}\n      tabIndex={0}\n    >\n      <div className=\"gameRunnerProblem\">{renderedProblem}</div>\n      <div className=\"gameRunnerAnswersSection\">\n        <div className=\"gameRunnerAnswers\">\n          {possibleRenderedAnswers.map((x, index) => (\n            <button onClick={() => onChoseAnswer(index)} key={index}>\n              {x}\n            </button>\n          ))}\n        </div>\n        {timer || null}\n      </div>\n      <div className=\"gameRunnerResults\">{footer}</div>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GameDisplay, useGameRunner } from \"./GameRunner\";\nimport { Game } from \"./games\";\n\nexport interface TimedGameRunnerProps {\n  game: Game;\n  goal: number;\n  gameTimeSeconds?: number;\n  onDone: (params: { numberCorrect: number; numberWrong: number }) => void;\n}\n\nexport const TimedGameRunner: React.FC<TimedGameRunnerProps> = ({\n  game,\n  goal,\n  gameTimeSeconds = 60,\n  onDone,\n}) => {\n  const countdownTime = 3;\n  const [timeRemaining, setTimeRemaining] = useState<number>(\n    gameTimeSeconds + countdownTime\n  );\n\n  const timeRemainingRef = useRef(timeRemaining);\n  timeRemainingRef.current = timeRemaining;\n\n  const intervalRef = useRef<number>(0);\n\n  const {\n    onReset,\n    numberWrong,\n    numberCorrect,\n    currentProblem,\n    ...gameDisplayProps\n  } = useGameRunner({\n    game,\n    delayAfterRightAnswer: 10,\n  });\n\n  useEffect(() => {\n    intervalRef.current = window.setInterval(() => {\n      if (timeRemainingRef.current <= 1) {\n        clearInterval(intervalRef.current);\n      }\n      setTimeRemaining(timeRemainingRef.current - 1);\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    if (!timeRemaining) {\n      onDone({ numberCorrect, numberWrong });\n    }\n  }, [timeRemaining]);\n\n  const countDownTimeLeft = timeRemaining - gameTimeSeconds;\n\n  const [timerLeftPercent, setTimerLeftPercent] = useState(100);\n\n  const timerIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const timerLeftRef = useRef(timerLeftPercent);\n  timerLeftRef.current = timerLeftPercent;\n  useEffect(() => {\n    if (countDownTimeLeft <= 0) {\n      if (!timerIntervalRef.current) {\n        timerIntervalRef.current = setInterval(() => {\n          const ratePerSecond = goal / timeRemaining;\n\n          const newPercent = timerLeftRef.current - ratePerSecond;\n          if (newPercent <= 0) {\n            setTimerLeftPercent(0);\n          } else {\n            setTimerLeftPercent(newPercent);\n          }\n        }, 10);\n      }\n    }\n  }, [countDownTimeLeft]);\n\n  useEffect(() => {\n    setTimerLeftPercent(100);\n  }, [currentProblem]);\n\n  return (\n    <div className=\"timedGameRunner\">\n      {countDownTimeLeft <= 0 && (\n        <GameDisplay\n          {...gameDisplayProps}\n          currentProblem={currentProblem}\n          footer={\n            <>\n              <div>Time remaining: {timeRemaining}</div>\n              <div>Nubmer correct: {numberCorrect}</div>\n              <div>Number wrong: {numberWrong}</div>\n            </>\n          }\n          timer={\n            <div className=\"gameRunnerTimer \">\n              <div\n                className=\"timerGone\"\n                style={{ height: `${100 - timerLeftPercent}%` }}\n              ></div>\n              <div\n                className=\"timerRemaining\"\n                style={{ height: `${timerLeftPercent}%` }}\n              ></div>\n            </div>\n          }\n        ></GameDisplay>\n      )}\n      {countDownTimeLeft > 0 && (\n        <div className=\"gameCountdown\">{timeRemaining - gameTimeSeconds}</div>\n      )}\n    </div>\n  );\n};\n\nexport interface HowLongForAmountGameProps {\n  game: Game;\n  goal: number;\n  onDone: (params: {\n    numberCorrect: number;\n    numberWrong: number;\n    seconds: number;\n  }) => void;\n}\n\nexport const HowLongForAmountGame: React.FC<HowLongForAmountGameProps> = ({\n  game,\n  goal,\n  onDone,\n}) => {\n  const [timeCount, setTimecount] = useState<number>(0);\n  const countdownTime = 3;\n  const timeCountRef = useRef(timeCount);\n  timeCountRef.current = timeCount;\n\n  const intervalRef = useRef<number>(0);\n\n  const {\n    onReset,\n    numberWrong,\n    numberCorrect,\n    currentProblem,\n    ...gameDisplayProps\n  } = useGameRunner({\n    game,\n    delayAfterRightAnswer: 10,\n  });\n\n  useEffect(() => {\n    intervalRef.current = window.setInterval(() => {\n      if (numberCorrect >= goal || timeCount > 10000) {\n        clearInterval(intervalRef.current);\n      }\n      setTimecount(timeCountRef.current + 1);\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    if (numberCorrect >= goal) {\n      onDone({\n        numberCorrect,\n        numberWrong,\n        seconds: timeCount - countdownTime,\n      });\n    }\n  }, [numberCorrect, numberWrong, timeCount]);\n\n  return (\n    <div className=\"timedGameRunner\">\n      {timeCount >= countdownTime && (\n        <GameDisplay\n          {...gameDisplayProps}\n          currentProblem={currentProblem}\n          footer={\n            <>\n              <div>Time count: {timeCount}</div>\n              <div>Nubmer correct: {numberCorrect}</div>\n              <div>Number wrong: {numberWrong}</div>\n            </>\n          }\n        ></GameDisplay>\n      )}\n      {timeCount < countdownTime && (\n        <div className=\"gameCountdown\">{countdownTime - timeCount}</div>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useMemo, useState } from \"react\";\n\nimport { BasicMultipleChoiceGameRunner } from \"../GameRunner\";\nimport { GameType, GameCreators, Game } from \"../games\";\nimport { HowLongForAmountGame, TimedGameRunner } from \"../TimeGame\";\nimport \"./styles.scss\";\n\nexport interface GameSettingsProps {}\n\nconst styles = [\n  \"How many in a minute?\",\n  \"How long to get 30\",\n  \"Endless\",\n] as const;\n\ntype Style = typeof styles[0 | 1 | 2];\n\nexport interface Settings {\n  Name: string;\n  Game: GameType;\n  Level: number;\n  Style: Style;\n}\n\nconst stepsAndNames = [\"Name\", \"Game\", \"Level\", \"Style\", \"GameRun\"] as const;\n\ntype Step = typeof stepsAndNames[0 | 1 | 2 | 3 | 4];\n\nexport const GameSettings: React.FC<{}> = () => {\n  const [step, setStep] = useState<Step>(\"Name\");\n  const [settings, setSettings] = useState<Partial<Settings>>({});\n  const onNext = () => {\n    const stepIndex = stepsAndNames.findIndex((x) => x === step);\n    setStep(stepsAndNames[stepIndex + 1]);\n  };\n  const onBack = () => {\n    const stepIndex = stepsAndNames.findIndex((x) => x === step);\n    setStep(stepsAndNames[stepIndex - 1]);\n  };\n\n  const hideBack = step === \"Name\";\n  const disableNext = step === \"GameRun\" || settings[step] === undefined;\n\n  const [lastGameResults, setLastGameResults] = useState<{\n    numberCorrect: number;\n    numberWrong: number;\n    seconds?: number;\n  } | null>(null);\n\n  return (\n    <div className=\"fullFlex\">\n      {step === \"GameRun\" && (\n        <GameRun\n          settings={settings as Settings}\n          onDone={(params) => {\n            setLastGameResults(params);\n            setStep(\"Style\");\n          }}\n        ></GameRun>\n      )}\n      {step !== \"GameRun\" && (\n        <>\n          <div className=\"headerFlex\">\n            <h1>Select {step}</h1>\n          </div>\n          <div className=\"bodyFlex\">\n            {step === \"Name\" && (\n              <NameSelect\n                selectedName={settings.Name || null}\n                setSelectedName={(selectedName) => {\n                  setSettings({ ...settings, Name: selectedName });\n                  setStep(\"Game\");\n                }}\n              />\n            )}\n            {step === \"Game\" && (\n              <>\n                <span>Name: {settings.Name}</span>\n                <GameSelect\n                  selectedGame={settings.Game || null}\n                  setSelectedGame={(selectedGame) => {\n                    setSettings({ ...settings, Game: selectedGame });\n                    setStep(\"Level\");\n                  }}\n                />\n              </>\n            )}\n            {step === \"Level\" && (\n              <>\n                <span>Name: {settings.Name}</span>\n                <span>Game: {settings.Game}</span>\n                <LevelSelect\n                  selectedLevel={settings.Level || null}\n                  setSelectedLevel={(selectedLevel) => {\n                    setSettings({ ...settings, Level: selectedLevel });\n                    setStep(\"Style\");\n                  }}\n                />\n              </>\n            )}\n            {step === \"Style\" && (\n              <>\n                <span>Name: {settings.Name}</span>\n                <span>Game: {settings.Game}</span>\n                <span>Level: {settings.Level}</span>\n                <GameStyleSelect\n                  selectedStyle={settings.Style || null}\n                  setSelectedStyle={(style) => {\n                    setSettings({ ...settings, Style: style });\n                  }}\n                />\n                {settings.Style && (\n                  <button\n                    onClick={() => setStep(\"GameRun\")}\n                    className=\"bigStart\"\n                  >\n                    Start\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n          {\n            <div className=\"footerFlex\">\n              {lastGameResults && (\n                <>\n                  <div>\n                    You got {lastGameResults.numberCorrect}\n                    {settings.Style === \"How long to get 30\"\n                      ? ` in ${lastGameResults.seconds || 0} seconds`\n                      : \"\"}\n                    !\n                  </div>\n                  <div>You missed {lastGameResults.numberWrong}</div>\n                </>\n              )}\n            </div>\n          }\n          <div className=\"controls\">\n            <button\n              disabled={hideBack}\n              className={hideBack ? \"hiddenButton\" : \"\"}\n              onClick={onBack}\n            >\n              Back\n            </button>\n            <button\n              disabled={disableNext}\n              onClick={onNext}\n              className={step === \"Style\" ? \"hiddenButton\" : \"\"}\n            >\n              {step}\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport const GameRun: React.FC<{\n  settings: Settings;\n  onDone: (params: {\n    numberCorrect: number;\n    numberWrong: number;\n    seconds?: number;\n  }) => void;\n}> = ({ settings, onDone }) => {\n  const game = useMemo(() => {\n    const gameCreator = GameCreators.find((x) => x.name === settings.Game);\n    if (gameCreator) {\n      return gameCreator.createGame({ maxNumber: settings.Level as number });\n    }\n  }, [settings]);\n\n  if (settings.Style === \"How many in a minute?\") {\n    return (\n      <TimedGameRunner\n        game={game as Game}\n        goal={60}\n        gameTimeSeconds={60}\n        onDone={onDone}\n      ></TimedGameRunner>\n    );\n  }\n  if (settings.Style === \"Endless\") {\n    return (\n      <BasicMultipleChoiceGameRunner\n        game={game as Game}\n        delayAfterRightAnswer={800}\n        onDone={onDone}\n      ></BasicMultipleChoiceGameRunner>\n    );\n  }\n  if (settings.Style === \"How long to get 30\") {\n    return (\n      <HowLongForAmountGame\n        game={game as Game}\n        goal={30}\n        onDone={onDone}\n      ></HowLongForAmountGame>\n    );\n  }\n  return <div></div>;\n};\n\nexport const GameStyleSelect: React.FC<{\n  selectedStyle: Style | null;\n  setSelectedStyle: (style: Style) => void;\n}> = ({ selectedStyle, setSelectedStyle }) => {\n  return (\n    <>\n      {styles.map((style) => (\n        <button\n          key={style}\n          className={`optionSelect ${\n            style === selectedStyle ? \"selectedBorder\" : \"\"\n          }`}\n          onClick={() => setSelectedStyle(style)}\n        >\n          {style}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport const LevelSelect: React.FC<{\n  selectedLevel: number | null;\n  setSelectedLevel: (level: number) => void;\n}> = ({ selectedLevel, setSelectedLevel }) => {\n  const levels = useMemo(() => {\n    const levelArray: number[] = [];\n    for (let index = 4; index <= 20; index++) {\n      levelArray.push(index);\n    }\n    return levelArray;\n  }, []);\n  return (\n    <div className=\"levelSelect\">\n      {levels.map((level) => (\n        <button\n          key={level}\n          className={`optionSelect ${\n            level === selectedLevel ? \"selectedBorder\" : \"\"\n          }`}\n          onClick={() => setSelectedLevel(level)}\n        >\n          {level}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport const GameSelect: React.FC<{\n  selectedGame: GameType | null;\n  setSelectedGame: (game: GameType) => void;\n}> = ({ setSelectedGame, selectedGame }) => {\n  return (\n    <>\n      {GameCreators.map((x) => (\n        <button\n          key={x.name}\n          className={`optionSelect ${\n            x.name === selectedGame ? \"selectedBorder\" : \"\"\n          }`}\n          onClick={() => setSelectedGame(x.name)}\n        >\n          {x.name}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport const NameSelect: React.FC<{\n  selectedName: string | null;\n  setSelectedName: (name: string) => void;\n}> = ({ setSelectedName, selectedName }) => {\n  const [availableNames, setAvailableNames] = useState<string[]>(() => {\n    const namesSettingsJson = window.localStorage.getItem(\"namesSettings\");\n    if (namesSettingsJson) {\n      const namesSettings = JSON.parse(namesSettingsJson);\n      if (namesSettings.version === 1) {\n        return namesSettings.names;\n      }\n    }\n    return [];\n  });\n\n  const addName = useCallback(\n    (newName: string) => {\n      if (\n        !availableNames.find(\n          (x) => x.toLocaleLowerCase() === newName.toLocaleLowerCase()\n        )\n      ) {\n        const newAvailableNames = [...availableNames, newName].sort((a, b) =>\n          a.toLocaleUpperCase().localeCompare(b.toLocaleUpperCase())\n        );\n        setAvailableNames(newAvailableNames);\n        window.localStorage.setItem(\n          \"namesSettings\",\n          JSON.stringify({ version: 1, names: newAvailableNames }, null, \" \")\n        );\n        setNewNameInput(null);\n        setSelectedName(newName);\n      }\n    },\n    [availableNames]\n  );\n\n  const [newNameInput, setNewNameInput] = useState<string | null>(null);\n  return (\n    <>\n      {availableNames.map((name) => (\n        <button\n          key={name}\n          onClick={() => setSelectedName(name)}\n          className={`optionSelect ${\n            name === selectedName ? \"selectedBorder\" : \"\"\n          }`}\n        >\n          {name}\n        </button>\n      ))}\n      {newNameInput !== null && (\n        <span>\n          <input\n            value={newNameInput}\n            placeholder=\"New name\"\n            onChange={(e) => setNewNameInput(e.target.value)}\n          ></input>\n          <button\n            onClick={() => {\n              addName(newNameInput);\n            }}\n          >\n            Save\n          </button>\n        </span>\n      )}\n      {newNameInput === null && (\n        <button onClick={() => setNewNameInput(\"\")} className=\"addNewName\">\n          +Add new\n        </button>\n      )}\n    </>\n  );\n};\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { GameCreators } from \"./games\";\n// import { useGame } from \"./useGame\";\nimport { BasicMultipleChoiceGameRunner, GameRunnerProps } from \"./GameRunner\";\nimport { GameSettings } from \"./GameSettings\";\n\nfunction App() {\n  // const [gameType, setGameType] = useState<GameType>(\"MultiplicationGame\");\n  const [selectedLevel, setSelectedLevel] = useState(9);\n  const [started, setStarted] = useState(false);\n  // const { game } = useGame(gameType, { maxNumber: 9 });\n  const [numberCorrect, setNumberCorrect] = useState<number | null>(null);\n  const [numberWrong, setNumberWrong] = useState<number | null>(null);\n  const handleDone = useCallback<GameRunnerProps[\"onDone\"]>((params) => {\n    setStarted(false);\n    setNumberCorrect(params.numberCorrect);\n\n    setNumberWrong(params.numberWrong);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {started ? (\n        <BasicMultipleChoiceGameRunner\n          game={GameCreators[0].createGame({ maxNumber: 9 })}\n          delayAfterRightAnswer={10}\n          onDone={handleDone}\n        ></BasicMultipleChoiceGameRunner>\n      ) : (\n        <GameSettings />\n        // <div className=\"fullFlex\">\n        //   <GameTypeSelector gameType={gameType} setGameType={setGameType} />\n        //   <LevelSelect\n        //     selectedLevel={selectedLevel}\n        //     setSelectedLevel={setSelectedLevel}\n        //   />\n        //   <div className=\"gameStartContainer\">\n        //     <button onClick={() => setStarted(true)}>Start</button>\n        //     {numberCorrect && <div>You got {numberCorrect}!</div>}\n        //     {numberWrong && <div>You missed {numberWrong}</div>}\n        //   </div>\n        // </div>\n      )}\n    </div>\n  );\n}\n\n// const LevelSelect: React.FC<{\n//   selectedLevel: number;\n//   setSelectedLevel: (level: number) => void;\n// }> = ({ selectedLevel, setSelectedLevel }) => {\n//   const levels = useMemo(() => {\n//     const levelArray: number[] = [];\n//     for (let index = 4; index <= 20; index++) {\n//       levelArray.push(index);\n//     }\n//     return levelArray;\n//   }, []);\n//   return (\n//     <div className=\"levelSelector\">\n//       {levels.map((level) => (\n//         <button\n//           onClick={() => setSelectedLevel(level)}\n//           className={`level ${level === selectedLevel ? \"selectedLevel\" : \"\"}`}\n//         >\n//           {level}\n//         </button>\n//       ))}\n//     </div>\n//   );\n// };\n\n// const GameTypeSelector: React.FC<{\n//   gameType: GameType;\n//   setGameType: (gameType: GameType) => void;\n// }> = ({ gameType, setGameType }) => {\n//   return (\n//     <div className=\"gameTypeSelector\">\n//       <button\n//         className={\n//           gameType === \"MultiplicationGame\"\n//             ? \"gameTypeSelected\"\n//             : \"gameTypeUnselected\"\n//         }\n//         onClick={() => setGameType(\"MultiplicationGame\")}\n//       >\n//         Multiplication game\n//       </button>\n//       <button\n//         className={\n//           gameType === \"AdditionGame\"\n//             ? \"gameTypeSelected\"\n//             : \"gameTypeUnselected\"\n//         }\n//         onClick={() => setGameType(\"AdditionGame\")}\n//       >\n//         Addition game\n//       </button>\n//     </div>\n//   );\n// };\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}